#pragma once
#include "../IO.hpp"

int prime_arr[] =
    {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,
     73, 79, 83, 89, 97, 101, 103, 107, 109,
     113, 127, 131, 137, 139, 149, 151, 157, 163,
     167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,
     251, 257, 263, 269, 271, 277, 281,
     283,
     293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359,
     367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449,
     457, 461, 463, 467, 479, 487, 491,
     499,
     503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,
     587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661,
     673, 677, 683, 691, 701, 709, 719,
     727,
     733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809,
     811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907,
     911, 919, 929, 937, 941, 947, 953,
     967,
     971, 977, 983, 991, 997};
long long big_primes[] =
    {1307533217, 1336158883, 1339172111, 1367797777, 1376837461, 1399436671,
     1426555723, 1440115249,
     1444635091, 1489833511, 1553111299, 1562150983, 1587763421, 1610362631,
     1652547823, 1666107349, 1700759471, 1782116627, 1797182767, 1810742293,
     1818275363,
     1892099449, 1904152361, 1919218501, 1940311097, 1944830939, 1968936763,
     1977976447, 1985509517, 1990029359};

long long gens[] =
    {1, 2, 3, 5, 2, 11, 3, 14, 19, 11, 17, 32, 30, 34, 29, 19, 34, 31, 63, 33,
     5, 63, 53, 58, 40, 83, 21, 18, 99, 33,
     106, 40, 85, 109, 40, 77, 91, 120, 105, 91, 79, 53, 182, 10, 184, 48, 48,
     150, 168, 72, 65, 46, 31, 216, 101,
     134,
     163, 147, 93, 42, 69, 7, 151, 308, 112, 12, 227, 185, 214, 305, 163, 234,
     154, 316, 3, 11, 233, 390, 271, 173,
     82,
     407, 13, 135, 414, 391, 177, 293, 426, 432, 337, 281, 385, 103, 95, 152,
     12, 371, 390, 77, 532, 34, 287, 73,
     308,
     493, 258, 549, 528, 411, 12, 283, 614, 596, 622, 309, 91, 511, 287, 433,
     585, 123, 2, 170, 183, 341, 459, 322,
     333,
     337, 507, 718, 82, 517, 396, 315, 565, 48, 362, 617, 776, 425, 584, 231,
     578, 395, 127, 27, 506, 435, 727, 659,
     697, 385, 290, 109, 430, 422, 344, 849, 513, 453, 852, 920, 152, 482, 653,
     271};

long long big_gens[] =
    {661761153, 1315209189, 235649158,
     80905954, 861543922, 677870461, 332266749, 1192707557, 820697698, 93737534,
     1395132003,
     176849700, 1113502216, 860516128, 1543755630, 328298286,
     1219407972, 1407392293, 733053145, 400000570, 1081174233, 847228024,
     1516266762, 83276926,
     500618997, 44975430, 47827763, 1411328206, 151880843, 19696955};

long long vbig_primes[] =
    {1223771071LL, 2557943639LL, 4625922079LL, 8465729693LL, 16196062793LL,
     32628322457LL, 64355194333LL,
     128143942897LL, 256728067087LL,
     512368953949LL, 1024440714547LL, 2048302681847LL, 4096121499499LL,
     8192933500519LL, 16384652744209LL,
     32768255472209LL, 65536007832649LL,
     131072225217863LL, 262144391360893LL, 524288060819213LL,
     1048576249040491LL, 2097152266756471LL,
     4194304028438527LL, 8388608209001387LL,
     16777216572671047LL, 33554432072300339LL, 67108864903274897LL,
     134217728402776373LL, 268435456069367221LL,
     536870912016065747LL};

vector<bool> primalityTable(int n) {
  vector<bool> res(n, true);
  if (n > 0) {
    res[0] = false;
  }
  if (n > 1) {
    res[1] = false;
  }
  for (int i = 2; i * i < n; i++) {
    if (res[i]) {
      for (int j = i * i; j < n; j += i) {
        res[j] = false;
      }
    }
  }
  return res;
}

vector<int> divisorTable(int n) {
  vector<int> res(n, 0);
  if (n > 1) {
    res[1] = 1;
  }
  for (int i = 2; i < n; i++) {
    if (res[i] == 0) {
      res[i] = i;
      if (ll(i) * i < n) {
        for (int j = i * i; j < n; j += i) {
          res[j] = i;
        }
      }
    }
  }
  return res;
}

vi primes(int n) {
  auto isPrime = primalityTable(n);
  vi res;
  for (int i = 0; i < n; ++i) {
    if (isPrime[i]) {
      res.push_back(i);
    }
  }
  return res;
}

bool isPrime(long n) {
  if (n < 2) {
    return false;
  }
  for (long i = 2; i * i <= n; i++) {
    if (n % i == 0) {
      return false;
    }
  }
  return true;
}

ll nextPrime(ll n) {
  if (n <= 2) {
    return 2;
  }
  n += 1 - (n & 1);
  while (!isPrime(n)) {
    n += 2;
  }
  return n;
}